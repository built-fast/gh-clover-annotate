#!/usr/bin/env php
<?php

declare(strict_types=1);

/**
 * Get the total coverage percentage from the XML.
 */
function getTotal(SimpleXMLElement $xml): float
{
    $allLines = 0;
    $coveredLines = 0;

    foreach ($xml->xpath('//metrics') as $metric) {
        $allLines += $metric['statements'];
        $coveredLines += $metric['coveredstatements'];
    }

    return round($coveredLines / $allLines * 100, 2, PHP_ROUND_HALF_DOWN);
}

/**
 * Get the files from the XML and return an array of files with their coverage
 * information.
 *
 *
 * @return list<array<string, int|string>>
 */
function getFiles(SimpleXMLElement $xml): array
{
    $files = [];

    foreach ($xml->xpath('//file') as $file) {
        $metrics = $file->metrics;

        $relativePath = str_replace(getcwd().'/', '', (string) $file['name']);
        $coveredMetrics = (int) $metrics['coveredstatements'];
        $totalMetrics = (int) $metrics['statements'];

        if ($totalMetrics === 0) {
            $percentage = 0;
        } else {
            $percentage = round($coveredMetrics / $totalMetrics * 100);
        }

        $icon = match (true) {
            $percentage < 50 => 'ðŸ”´',
            $percentage < 70 => 'ðŸŸ¡',
            default => 'ðŸŸ¢',
        };

        $line = [
            'name' => $relativePath,
            'total' => $totalMetrics,
            'covered' => $coveredMetrics,
            'percentage' => "{$icon} {$percentage}%",
        ];

        $files[] = $line;
    }

    return $files;
}

/**
 * Print a formatted, nicely spaced markdown table
 *
 * @param  list<array<int, int|string>>  $rows
 */
function markdownTable(array $rows): string
{
    $columns = array_map(null, ...$rows);

    $lengths = array_map(function ($column) {
        $cols = array_map(fn ($c) => mb_strlen((string) $c), $column);

        if ($cols === []) {
            return 0;
        }

        return max($cols);
    }, $columns);

    $formattedRows = array_map(function ($row) use ($lengths) {
        return '| '.implode(' | ', array_map(function ($cell, $length) {
            return mb_str_pad((string) $cell, $length);
        }, $row, $lengths)).' |';
    }, $rows);

    $separator = '| '.implode(' | ', array_map(function ($length) {
        return str_repeat('-', $length);
    }, $lengths)).' |';

    return implode("\n", [
        $formattedRows[0],
        $separator,
        implode("\n", array_slice($formattedRows, 1)),
    ]);
}

$clover = $argv[1] ?? 'clover.xml';

if (! file_exists($clover)) {
    echo "File not found: {$clover}\n";
    exit(1);
}

$content = file_get_contents($clover) or exit('Could not read file');
$xml = new SimpleXMLElement($content);

$files = getFiles($xml);

$header = ['Coverage', 'Total Statements', 'Covered Statements', 'File'];

$rows = [$header];

foreach ($files as $file) {
    $rows[] = [
        $file['percentage'],
        $file['total'],
        $file['covered'],
        $file['name'],
    ];
}

$totalCoverage = getTotal($xml);

echo "## Code Coverage Report\n";

$calloutType = match (true) {
    $totalCoverage < 50 => 'CAUTION',
    $totalCoverage < 70 => 'WARNING',
    default => 'NOTE',
};

echo "> [!{$calloutType}]\n";
echo "> Code coverage is at **{$totalCoverage}**%\n\n";

echo markdownTable($rows);

echo "\n";
